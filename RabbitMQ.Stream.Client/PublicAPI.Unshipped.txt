const RabbitMQ.Stream.Client.StreamStatsResponse.Key = 28 -> ushort
RabbitMQ.Stream.Client.AbstractEntity.MaybeCancelToken() -> void
RabbitMQ.Stream.Client.AbstractEntity.Token.get -> System.Threading.CancellationToken
RabbitMQ.Stream.Client.Chunk.Data.get -> System.Memory<byte>
RabbitMQ.Stream.Client.Chunk.MagicVersion.get -> byte
RabbitMQ.Stream.Client.Client.StreamStats(string stream) -> System.Threading.Tasks.ValueTask<RabbitMQ.Stream.Client.StreamStatsResponse>
RabbitMQ.Stream.Client.CloseResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.ConsumerUpdateQueryResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.CreateResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.CreditResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.DeclarePublisherResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.DeletePublisherResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.DeleteResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.Deliver.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.ICommand.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.Message.Write(System.Span<byte> span) -> int
RabbitMQ.Stream.Client.MetaDataQuery.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.MetaDataResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.MetaDataUpdate.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.PartitionsQueryResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.PeerPropertiesResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.Publish.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.PublishConfirm.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.PublishError.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.QueryOffsetResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.QueryPublisherResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.Reliable.DeduplicatingProducer
RabbitMQ.Stream.Client.Reliable.DeduplicatingProducer.Close() -> System.Threading.Tasks.Task
RabbitMQ.Stream.Client.Reliable.DeduplicatingProducer.GetLastPublishedId() -> System.Threading.Tasks.Task<ulong>
RabbitMQ.Stream.Client.Reliable.DeduplicatingProducer.IsOpen() -> bool
RabbitMQ.Stream.Client.Reliable.DeduplicatingProducer.Send(ulong publishing, RabbitMQ.Stream.Client.Message message) -> System.Threading.Tasks.ValueTask
RabbitMQ.Stream.Client.Reliable.DeduplicatingProducerConfig
RabbitMQ.Stream.Client.Reliable.DeduplicatingProducerConfig.DeduplicatingProducerConfig(RabbitMQ.Stream.Client.StreamSystem streamSystem, string stream, string reference) -> void
RabbitMQ.Stream.Client.Reliable.ProducerConfig.Reference.set -> void
RabbitMQ.Stream.Client.StreamStats
RabbitMQ.Stream.Client.StreamStats.CommittedChunkId() -> ulong
RabbitMQ.Stream.Client.StreamStats.FirstOffset() -> ulong
RabbitMQ.Stream.Client.StreamStats.LastOffset() -> ulong
RabbitMQ.Stream.Client.StreamStatsResponse
RabbitMQ.Stream.Client.StreamStatsResponse.CorrelationId.get -> uint
RabbitMQ.Stream.Client.StreamStatsResponse.ResponseCode.get -> RabbitMQ.Stream.Client.ResponseCode
RabbitMQ.Stream.Client.StreamStatsResponse.SizeNeeded.get -> int
RabbitMQ.Stream.Client.StreamStatsResponse.Statistic.get -> System.Collections.Generic.IDictionary<string, long>
RabbitMQ.Stream.Client.StreamStatsResponse.StreamStatsResponse() -> void
RabbitMQ.Stream.Client.StreamStatsResponse.StreamStatsResponse(uint correlationId, RabbitMQ.Stream.Client.ResponseCode responseCode, System.Collections.Generic.IDictionary<string, long> statistic) -> void
RabbitMQ.Stream.Client.StreamStatsResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.StreamSystem.StreamStats(string stream) -> System.Threading.Tasks.Task<RabbitMQ.Stream.Client.StreamStats>
static RabbitMQ.Stream.Client.Connection.Create(System.Net.EndPoint endpoint, System.Func<System.Memory<byte>, System.Threading.Tasks.Task> commandCallback, System.Func<string, System.Threading.Tasks.Task> closedCallBack, RabbitMQ.Stream.Client.SslOption sslOption, Microsoft.Extensions.Logging.ILogger logger) -> System.Threading.Tasks.Task<RabbitMQ.Stream.Client.Connection>
static RabbitMQ.Stream.Client.Message.From(ref System.Buffers.ReadOnlySequence<byte> seq, uint len) -> RabbitMQ.Stream.Client.Message
static RabbitMQ.Stream.Client.Reliable.DeduplicatingProducer.Create(RabbitMQ.Stream.Client.Reliable.DeduplicatingProducerConfig producerConfig, Microsoft.Extensions.Logging.ILogger<RabbitMQ.Stream.Client.Reliable.Producer> logger = null) -> System.Threading.Tasks.Task<RabbitMQ.Stream.Client.Reliable.DeduplicatingProducer>
RabbitMQ.Stream.Client.SubscribeResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
RabbitMQ.Stream.Client.UnsubscribeResponse.Write(System.Buffers.IBufferWriter<byte> writer) -> int
static RabbitMQ.Stream.Client.Reliable.DeduplicatingProducer.Create(RabbitMQ.Stream.Client.Reliable.DeduplicatingProducerConfig producerConfig, Microsoft.Extensions.Logging.ILogger<RabbitMQ.Stream.Client.Reliable.Producer> logger = null) -> System.Threading.Tasks.Task<RabbitMQ.Stream.Client.Reliable.DeduplicatingProducer>
